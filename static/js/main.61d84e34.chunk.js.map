{"version":3,"sources":["firebase/firebase.ts","redux/reduxTypes.ts","notification.ts","redux/actions.ts","ImageItem.tsx","Feed.tsx","Paint.tsx","Router/AppRouter.tsx","auth.tsx","Router/RoutePaths.ts","Router/PaintRouter.tsx","App.tsx","redux/imagesReducer.ts","redux/userReducer.ts","redux/rootReducer.ts","redux/store.ts","localStorage.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","GET_DATA","ADD_DATA","DELETE_DATA","GOOGLE_SIGN_IN","LOGOUT","CLEAR_DATA","openNotification","message","description","notification","error","placement","getImages","dispatch","a","response","collection","orderBy","images","get","then","querySnapshot","forEach","doc","data","firestoreId","id","type","payload","catch","e","name","ImageItem","item","useDispatch","user","useSelector","state","cover","src","base64","actions","uid","DeleteOutlined","onClick","img","delete","console","log","Meta","avatar","title","username","Feed","useState","selectedUser","setSelectedUser","useEffect","users","reduce","acc","find","className","value","onChange","map","index","Option","key","TOOLS","Paint","canvasRef","useRef","contextRef","secondCanvasRef","secondContextRef","isDrawing","setIsDrawing","startX","setStartX","startY","setStartY","selectedTool","setSelectedTool","lineWidth","setlineWidth","color","setColor","deltaY","setDeltaY","canvas","current","width","parent","innerWidth","height","innerHeight","context","getContext","lineCap","secondCanvas","secondContext","document","getElementById","clientHeight","deltaX","window","clearRect","toDataURL","displayName","photoURL","imageForDB","Date","getTime","add","target","onMouseUp","closePath","drawImage","onMouseDown","nativeEvent","x","y","beginPath","moveTo","onMouseMove","strokeStyle","lineTo","arc","Math","sqrt","pow","PI","x0","min","y0","w","abs","h","strokeRect","stroke","ref","AppRouter","path","useRouteMatch","currentMenuItem","setCurrentMenuItem","mode","selectedKeys","Item","to","auth","signOut","exact","component","Auth","provider","GoogleAuthProvider","signInWithPopup","result","PATH_ROUTES","PaintRouter","render","App","initialState","rootReducer","combineReducers","action","slice","findIndex","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","app","ReactDOM"],"mappings":"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","file":"static/js/main.61d84e34.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECTID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\nexport const db = firebase.firestore()\r\n","export const GET_DATA = 'DATA/GET_DATA'\r\nexport const ADD_DATA = 'DATA/ADD_DATA'\r\nexport const DELETE_DATA = 'DATA/DELETE_DATA'\r\nexport const GOOGLE_SIGN_IN = 'USER/GOOGLE_SIGN_IN'\r\nexport const LOGOUT = 'USER/LOGOUT'\r\nexport const CLEAR_DATA = 'DATA/CLEAR_DATA'\r\n","import { notification } from 'antd'\r\n\r\nexport const openNotification = (\r\n    message: string,\r\n    description: string\r\n): void => {\r\n    notification.error({\r\n        message: message,\r\n        description: description,\r\n        placement: 'bottomLeft',\r\n    })\r\n}\r\n","import firebase from 'firebase'\r\nimport { db } from '../firebase/firebase'\r\nimport {\r\n    ADD_DATA,\r\n    CLEAR_DATA,\r\n    DELETE_DATA,\r\n    GET_DATA,\r\n    GOOGLE_SIGN_IN,\r\n    LOGOUT,\r\n} from './reduxTypes'\r\nimport { Dispatch } from 'redux'\r\nimport { openNotification } from '../notification'\r\nimport { image } from './imagesReducer'\r\n\r\nexport interface Iimage {\r\n    avatar?: string\r\n    base64?: string\r\n    id?: string\r\n    uid?: string\r\n    username?: string\r\n}\r\n\r\nexport interface IdbImage extends Iimage {\r\n    firestoreId: string\r\n}\r\n\r\nexport const getImages = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: IdbImage[] }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: IdbImage[] }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images').orderBy('id')\r\n        let images: IdbImage[] = []\r\n        try {\r\n            await response\r\n                .get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        images = [\r\n                            { ...doc.data(), firestoreId: doc.id },\r\n                            ...images,\r\n                        ]\r\n                    })\r\n                })\r\n                .then(() => {\r\n                    dispatch({ type: GET_DATA, payload: images })\r\n                })\r\n                .catch((e) => {\r\n                    throw e\r\n                })\r\n        } catch (e) {\r\n            openNotification(e.name, e.message)\r\n        }\r\n    }\r\n}\r\n\r\nexport const addImage = (\r\n    img: string,\r\n    uid: string,\r\n    username: string,\r\n    avatar: string\r\n): ((\r\n    dispatch: Dispatch<{ type: string; payload: Iimage }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: Iimage }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images')\r\n        const imageForDB = {\r\n            base64: img,\r\n            id: `${new Date().getTime()}`,\r\n            uid: uid,\r\n            username: username,\r\n            avatar: avatar,\r\n        }\r\n        try {\r\n            await response\r\n                .add(imageForDB)\r\n                .then(() => {\r\n                    dispatch({\r\n                        type: ADD_DATA,\r\n                        payload: { ...imageForDB },\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            openNotification(e.name, e.message)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteImage = (\r\n    img: image\r\n): ((\r\n    dispatch: Dispatch<{ type: string; payload: image[] }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: image[] }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images')\r\n        try {\r\n            await response\r\n                .doc(img.firestoreId)\r\n                .delete()\r\n                .then(() => {\r\n                    console.log('success', 'Image deleted!')\r\n                })\r\n                .then(() => {\r\n                    dispatch({ type: DELETE_DATA, payload: [img] })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            openNotification(e.name, e.message)\r\n        }\r\n    }\r\n}\r\n\r\nexport const googleSignIn = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: firebase.User }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: firebase.User }>\r\n    ): Promise<void> => {\r\n        const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n        await firebase\r\n            .auth()\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n                const user = result.user\r\n                dispatch({ type: GOOGLE_SIGN_IN, payload: user })\r\n            })\r\n            .catch((e) => {\r\n                openNotification(e.name, e.message)\r\n            })\r\n    }\r\n}\r\n\r\nexport const logOut = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: Record<string, never> }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: Record<string, never> }>\r\n    ): Promise<void> => {\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                .signOut()\r\n                .then(() => {\r\n                    dispatch({ type: LOGOUT, payload: {} })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            openNotification(e.name, e.message)\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearImagesList = (): { type: string; payload: [] } => {\r\n    return {\r\n        type: CLEAR_DATA,\r\n        payload: [],\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Avatar, Card } from 'antd'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { deleteImage } from './redux/actions'\r\nimport { RootState } from './redux/rootReducer'\r\n\r\nexport const ImageItem = (item: {\r\n    id: string\r\n    base64: string\r\n    firestoreId: string\r\n    username: string\r\n    avatar: string\r\n    uid: string\r\n}): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n\r\n    return (\r\n        <Card\r\n            key={item.id}\r\n            cover={<img src={item.base64} />}\r\n            actions={[\r\n                user.uid === item.uid ? (\r\n                    <DeleteOutlined\r\n                        key={item.id}\r\n                        onClick={() => dispatch(deleteImage(item))}\r\n                    />\r\n                ) : null,\r\n            ]}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar src={item.avatar} />}\r\n                title={item.username}\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n","import { Select } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ImageItem } from './ImageItem'\r\nimport { getImages, Iimage } from './redux/actions'\r\nimport { RootState } from './redux/rootReducer'\r\n\r\nexport const Feed = (): JSX.Element => {\r\n    const images = useSelector((state: RootState) => state.images.images)\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n    const dispatch = useDispatch()\r\n    const [selectedUser, setSelectedUser] = useState('All')\r\n\r\n    useEffect(() => {\r\n        dispatch(getImages())\r\n    }, [dispatch])\r\n\r\n    const users = images.reduce(\r\n        (acc: string[], item: Iimage) => {\r\n            if (\r\n                acc.find(\r\n                    (name: string) =>\r\n                        name === item.username ||\r\n                        (name === 'My' && item.uid === user.uid)\r\n                )\r\n            ) {\r\n                return acc\r\n            } else {\r\n                return [...acc, user.uid === item.uid ? 'My' : item.username]\r\n            }\r\n        },\r\n        ['All']\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>Sort by user </span>\r\n                <Select\r\n                    className=\"users-select\"\r\n                    value={selectedUser}\r\n                    onChange={(e) => setSelectedUser(`${e}`)}\r\n                >\r\n                    {users.map((item: string, index: number) => (\r\n                        <Select.Option value={item} key={index}>\r\n                            {item}\r\n                        </Select.Option>\r\n                    ))}\r\n                </Select>\r\n            </div>\r\n            <div className=\"images-wrapper\">\r\n                <h3>{`${selectedUser} images`}</h3>\r\n                {images.map(\r\n                    (item: {\r\n                        id: string\r\n                        base64: string\r\n                        firestoreId: string\r\n                        username: string\r\n                        avatar: string\r\n                        uid: string\r\n                    }) =>\r\n                        item.username === selectedUser ||\r\n                        selectedUser === 'All' ||\r\n                        (selectedUser === 'My' && item.uid === user.uid) ? (\r\n                            <ImageItem {...item} key={item.id} />\r\n                        ) : null\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { Button, Select, Slider } from 'antd'\r\nimport { SelectValue } from 'antd/lib/select'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport './App.css'\r\nimport { addImage, getImages } from './redux/actions'\r\nimport { RootState } from './redux/rootReducer'\r\n\r\nconst TOOLS = ['Pencil', 'Rectangle', 'Circle', 'Line']\r\n\r\nexport const Paint = (): JSX.Element => {\r\n    const canvasRef = useRef(null)\r\n    const contextRef = useRef(null)\r\n    const secondCanvasRef = useRef(null)\r\n    const secondContextRef = useRef(null)\r\n    const [isDrawing, setIsDrawing] = useState(false)\r\n    const [startX, setStartX] = useState(0)\r\n    const [startY, setStartY] = useState(0)\r\n    const [selectedTool, setSelectedTool] = useState(TOOLS[0])\r\n    const [lineWidth, setlineWidth] = useState(5)\r\n    const [color, setColor] = useState('#776e6e')\r\n\r\n    const [deltaY, setDeltaY] = useState(0)\r\n\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        canvas.width = parent.innerWidth * 0.8\r\n        canvas.height = parent.innerHeight * 0.8\r\n        const context = canvas.getContext('2d')\r\n        contextRef.current = context\r\n        context.lineCap = 'round'\r\n\r\n        const secondCanvas = secondCanvasRef.current\r\n        secondCanvas.width = parent.innerWidth * 0.8\r\n        secondCanvas.height = parent.innerHeight * 0.8\r\n        const secondContext = secondCanvas.getContext('2d')\r\n        secondContextRef.current = secondContext\r\n\r\n        setDeltaY(\r\n            document.getElementById('tools').clientHeight +\r\n                document.getElementById('page-header').clientHeight +\r\n                14\r\n        )\r\n    }, [])\r\n\r\n    const deltaX = (): number => {\r\n        return (window.innerWidth - canvasRef.current.width) / 2\r\n    }\r\n\r\n    const updateImg = (): void => {\r\n        secondContextRef.current.drawImage(canvasRef.current, 0, 0)\r\n        contextRef.current.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        )\r\n    }\r\n\r\n    const startDraw = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement>): void => {\r\n        const { x, y } = nativeEvent\r\n        contextRef.current.beginPath()\r\n        contextRef.current.moveTo(x - deltaX(), y - deltaY)\r\n\r\n        setIsDrawing(true)\r\n        setStartX(x)\r\n        setStartY(y)\r\n    }\r\n\r\n    const finishDraw = (): void => {\r\n        contextRef.current.closePath()\r\n        updateImg()\r\n        setIsDrawing(false)\r\n    }\r\n\r\n    const draw = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement>): void => {\r\n        if (!isDrawing) {\r\n            return\r\n        }\r\n        const { x, y } = nativeEvent\r\n\r\n        contextRef.current.lineWidth = lineWidth\r\n        contextRef.current.strokeStyle = color\r\n\r\n        contextRef.current.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        )\r\n        switch (selectedTool) {\r\n            case 'Line':\r\n                contextRef.current.beginPath()\r\n                contextRef.current.moveTo(startX - deltaX(), startY - deltaY)\r\n                contextRef.current.lineTo(x - deltaX(), y - deltaY)\r\n                break\r\n            case 'Circle':\r\n                const getRaduis = (): number => {\r\n                    return Math.sqrt(\r\n                        Math.pow(y - startY, 2) + Math.pow(x - startX, 2)\r\n                    )\r\n                }\r\n\r\n                contextRef.current.beginPath()\r\n                contextRef.current.arc(\r\n                    startX - deltaX(),\r\n                    startY - deltaY,\r\n                    getRaduis(),\r\n                    0,\r\n                    Math.PI * 2,\r\n                    true\r\n                )\r\n                break\r\n            case 'Pencil':\r\n                contextRef.current.lineTo(x - deltaX(), y - deltaY)\r\n                break\r\n            case 'Rectangle':\r\n                const x0 = Math.min(x, startX) - deltaX(),\r\n                    y0 = Math.min(y, startY) - deltaY,\r\n                    w = Math.abs(x - startX),\r\n                    h = Math.abs(y - startY)\r\n\r\n                contextRef.current.strokeRect(x0, y0, w, h)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        contextRef.current.stroke()\r\n    }\r\n\r\n    const save = (): void => {\r\n        dispatch(\r\n            addImage(\r\n                secondCanvasRef.current.toDataURL(),\r\n                user.uid,\r\n                user.displayName,\r\n                user.photoURL\r\n            )\r\n        )\r\n        dispatch(getImages())\r\n    }\r\n\r\n    const clear = (): void => {\r\n        secondContextRef.current.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        )\r\n        contextRef.current.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"tools\">\r\n                <Button onClick={clear}>clear</Button>\r\n                <Button onClick={save}>save</Button>\r\n                <Select\r\n                    value={selectedTool}\r\n                    onChange={(e: SelectValue) => setSelectedTool(`${e}`)}\r\n                >\r\n                    {TOOLS.map((item, index) => (\r\n                        <Select.Option key={`${index}`} value={item}>\r\n                            {item}\r\n                        </Select.Option>\r\n                    ))}\r\n                </Select>\r\n\r\n                <input\r\n                    type=\"color\"\r\n                    id=\"color\"\r\n                    value={color}\r\n                    onChange={(e) => setColor(e.target.value)}\r\n                />\r\n                <Slider\r\n                    value={lineWidth}\r\n                    onChange={(value: string | number) => setlineWidth(+value)}\r\n                />\r\n            </div>\r\n\r\n            <div id=\"viewport\">\r\n                <canvas\r\n                    id=\"canvas\"\r\n                    onMouseUp={finishDraw}\r\n                    onMouseDown={startDraw}\r\n                    onMouseMove={draw}\r\n                    ref={canvasRef}\r\n                />\r\n                <canvas id=\"temp_canvas\" ref={secondCanvasRef} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { Button, Menu } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Route, useRouteMatch } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport { Feed } from '../Feed'\r\nimport { Paint } from '../Paint'\r\nimport { clearImagesList, logOut } from '../redux/actions'\r\n\r\nexport const AppRouter = (): JSX.Element => {\r\n    const { path } = useRouteMatch()\r\n    const dispatch = useDispatch()\r\n    const [currentMenuItem, setCurrentMenuItem] = useState('feed')\r\n\r\n    return (\r\n        <>\r\n            <Menu\r\n                mode=\"horizontal\"\r\n                id=\"page-header\"\r\n                selectedKeys={[currentMenuItem]}\r\n                onClick={(e) => setCurrentMenuItem(e.key)}\r\n            >\r\n                <Menu.Item key=\"paint\">\r\n                    <Link to={`${path}/paint`}>Paint</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"feed\">\r\n                    <Link to={path}>Feed</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"logout-button\">\r\n                    <Button\r\n                        id=\"logout-button\"\r\n                        onClick={() => {\r\n                            dispatch(logOut())\r\n                            dispatch(clearImagesList())\r\n                        }}\r\n                    >\r\n                        Logout\r\n                    </Button>\r\n                </Menu.Item>\r\n            </Menu>\r\n            <Route exact path={path} component={Feed} />\r\n            <Route path={`${path}/paint`} component={Paint} />\r\n        </>\r\n    )\r\n}\r\n","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { googleSignIn } from './redux/actions'\r\n\r\nexport const Auth = (): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"auth-container\">\r\n                <h1>Sign In with Google</h1>\r\n                <Button onClick={() => dispatch(googleSignIn())}>Auth</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const PATH_ROUTES = {\r\n    APP: '/app',\r\n    AUTH: '/auth',\r\n    MAIN: '/',\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n} from 'react-router-dom'\r\nimport { AppRouter } from './AppRouter'\r\nimport { Auth } from '../auth'\r\nimport { RootState } from '../redux/rootReducer'\r\nimport { PATH_ROUTES } from './RoutePaths'\r\n\r\nexport const PaintRouter = (): JSX.Element => {\r\n    const user = useSelector((state: RootState) => state.user.user.uid)\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={PATH_ROUTES.MAIN}>\r\n                    <Redirect to={user ? PATH_ROUTES.APP : PATH_ROUTES.AUTH} />\r\n                </Route>\r\n                <Route\r\n                    path={PATH_ROUTES.APP}\r\n                    render={() =>\r\n                        user ? (\r\n                            <AppRouter />\r\n                        ) : (\r\n                            <Redirect to={PATH_ROUTES.AUTH} />\r\n                        )\r\n                    }\r\n                />\r\n                <Route\r\n                    path={PATH_ROUTES.AUTH}\r\n                    render={() =>\r\n                        user ? <Redirect to={PATH_ROUTES.APP} /> : <Auth />\r\n                    }\r\n                />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport { PaintRouter } from './Router/PaintRouter'\n\nfunction App(): JSX.Element {\n    return <PaintRouter />\n}\n\nexport default App\n","import { ADD_DATA, CLEAR_DATA, DELETE_DATA, GET_DATA } from './reduxTypes'\r\n\r\nexport type image = {\r\n    id: string\r\n    base64: string\r\n    firestoreId: string\r\n    username: string\r\n    avatar: string\r\n    uid: string\r\n}\r\n\r\ntype init = { images: image[] }\r\n\r\nexport type action = {\r\n    type: string\r\n    payload: image[]\r\n}\r\n\r\nconst initialState: init = {\r\n    images: [] as image[],\r\n}\r\n\r\ntype State = typeof initialState\r\n\r\nexport const imagesReducer = (state = initialState, action: action): State => {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return { images: action.payload }\r\n        case ADD_DATA:\r\n            return { ...state }\r\n        case DELETE_DATA:\r\n            return {\r\n                ...state,\r\n                images: [\r\n                    ...state.images.slice(\r\n                        0,\r\n                        state.images.findIndex(\r\n                            (item) => item.id === action.payload[0].id\r\n                        )\r\n                    ),\r\n                    ...state.images.slice(\r\n                        state.images.findIndex(\r\n                            (item) => item.id === action.payload[0].id\r\n                        ) + 1\r\n                    ),\r\n                ],\r\n            }\r\n        case CLEAR_DATA:\r\n            return { images: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { GOOGLE_SIGN_IN, LOGOUT } from './reduxTypes'\r\nimport firebase from 'firebase'\r\n\r\nexport type User = firebase.User\r\n\r\nconst initialState: { user: User } = {\r\n    user: {} as User,\r\n}\r\n\r\ntype State = typeof initialState\r\ntype Action = {\r\n    type: string\r\n    payload: User\r\n}\r\n\r\nexport const userReducer = (state = initialState, action: Action): State => {\r\n    switch (action.type) {\r\n        case GOOGLE_SIGN_IN:\r\n            return { ...state, user: action.payload }\r\n        case LOGOUT:\r\n            return { user: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { imagesReducer } from './imagesReducer'\r\nimport { userReducer } from './userReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    images: imagesReducer,\r\n    user: userReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import { rootReducer } from './rootReducer'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { loadState, saveState } from '../localStorage'\r\n\r\nconst persistedState = loadState()\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        user: store.getState().user,\r\n    })\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { RootState } from './redux/rootReducer'\r\nimport { User } from './redux/userReducer'\r\n\r\nexport const loadState = (): RootState => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: { user: { user: User } }): void => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n"],"sourceRoot":""}