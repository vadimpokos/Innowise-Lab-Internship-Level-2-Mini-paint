{"version":3,"sources":["firebase/firebase.ts","utils/notification.ts","constants/reduxTypes.ts","redux/imagesReducer/actions.ts","components/Feed/ImageItem/index.tsx","components/Feed/FeedComponent/index.tsx","constants/tools.ts","components/Canvas/index.tsx","components/Paint/index.tsx","components/Menu/index.tsx","redux/userReducer/actions.ts","router/AppRouter.tsx","components/Auth/index.tsx","constants/routePaths.ts","router/PaintRouter.tsx","App.tsx","HOC.tsx","Hooks/useDeviceType.ts","redux/imagesReducer/reducer.ts","redux/userReducer/reducer.ts","redux/rootReducer.ts","redux/appStore.ts","services/LocalStorage/index.tsx","redux/customMiddleware/customMiddleware.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","openNotification","message","description","placement","notification","error","GET_DATA","ADD_DATA","DELETE_DATA","GOOGLE_SIGN_IN","LOGOUT","CLEAR_DATA","getImages","dispatch","a","response","collection","orderBy","images","get","then","querySnapshot","forEach","doc","data","firestoreId","id","type","payload","catch","e","Error","name","ImageItemComponent","item","useDispatch","user","useSelector","state","cover","src","base64","actions","uid","DeleteOutlined","onClick","img","delete","Meta","avatar","title","username","ImageItem","React","memo","FeedComponent","useState","selectedUser","setSelectedUser","useEffect","users","reduce","acc","find","className","value","onChange","map","index","Option","key","Feed","TOOLS","CanvasComponent","canvasRef","secondCanvasRef","secondContextRef","contextRef","selectedTool","lineWidth","color","isDrawing","setIsDrawing","startX","setStartX","startY","setStartY","canvasRefInner","useRef","contextRefInner","secondContextRefInner","secondCanvasRefInner","viewportRef","canvas","current","width","clientWidth","height","clientHeight","context","getContext","lineCap","secondCanvas","secondContext","deltaX","canvasWidth","window","innerWidth","deltaY","document","getElementById","ref","onMouseUp","closePath","drawImage","clearRect","updateImg","onMouseDown","nativeEvent","x","y","beginPath","moveTo","onMouseMove","strokeStyle","lineTo","arc","Math","sqrt","pow","PI","x0","min","y0","w","abs","h","strokeRect","stroke","Canvas","PaintComponent","setSelectedTool","setlineWidth","setColor","toDataURL","displayName","photoURL","imageForDB","Date","getTime","add","target","Paint","HeaderMenuComponent","path","useRouteMatch","currentMenuItem","setCurrentMenuItem","mode","selectedKeys","Item","to","auth","signOut","HeaderMenu","AppRouterComponent","exact","component","AppRouter","AuthComponent","provider","GoogleAuthProvider","signInWithPopup","result","Auth","PATH_ROUTES","PaintRouterComponent","render","PaintRouter","WrappedComponent","App","isUsingHOC","device","outerWidth","console","log","props","initialState","rootReducer","combineReducers","action","slice","findIndex","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","next","subscribe","stringify","setItem","saveState","getState","app","ReactDOM"],"mappings":"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","file":"static/js/main.23fd8b95.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECTID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\nexport const db = firebase.firestore()\r\n","import { notification } from 'antd'\r\nimport { NotificationPlacement } from 'antd/lib/notification'\r\n\r\ninterface INotification {\r\n    message: string\r\n    description: string\r\n    placement?: NotificationPlacement | undefined\r\n}\r\n\r\nexport const openNotification = ({\r\n    message,\r\n    description,\r\n    placement = 'bottomLeft',\r\n}: INotification): void => {\r\n    notification.error({\r\n        message: message,\r\n        description: description,\r\n        placement: placement,\r\n    })\r\n}\r\n","export const GET_DATA = 'DATA/GET_DATA'\r\nexport const ADD_DATA = 'DATA/ADD_DATA'\r\nexport const DELETE_DATA = 'DATA/DELETE_DATA'\r\nexport const GOOGLE_SIGN_IN = 'USER/GOOGLE_SIGN_IN'\r\nexport const LOGOUT = 'USER/LOGOUT'\r\nexport const CLEAR_DATA = 'DATA/CLEAR_DATA'\r\n","import { Dispatch } from 'redux'\r\nimport { db } from '../../firebase/firebase'\r\nimport { openNotification } from '../../utils/notification'\r\nimport {\r\n    ADD_DATA,\r\n    CLEAR_DATA,\r\n    DELETE_DATA,\r\n    GET_DATA,\r\n} from '../../constants/reduxTypes'\r\nimport { IDbImage, IImage, Image } from './types'\r\n\r\nexport const getImages = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: IDbImage[] }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: IDbImage[] }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images').orderBy('id')\r\n        let images: IDbImage[] = []\r\n        try {\r\n            await response\r\n                .get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        images = [\r\n                            { ...doc.data(), firestoreId: doc.id },\r\n                            ...images,\r\n                        ]\r\n                    })\r\n                })\r\n                .then(() => {\r\n                    dispatch({ type: GET_DATA, payload: images })\r\n                })\r\n                .catch((e) => {\r\n                    throw e\r\n                })\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                openNotification({ message: e.name, description: e.message })\r\n            } else {\r\n                openNotification({\r\n                    message: 'error',\r\n                    description: 'unknown error',\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addImage = (\r\n    img: string,\r\n    uid: string,\r\n    username: string,\r\n    avatar: string\r\n): ((\r\n    dispatch: Dispatch<{ type: string; payload: IImage }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: IImage }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images')\r\n        const imageForDB = {\r\n            base64: img,\r\n            id: `${new Date().getTime()}`,\r\n            uid: uid,\r\n            username: username,\r\n            avatar: avatar,\r\n        }\r\n        try {\r\n            await response\r\n                .add(imageForDB)\r\n                .then(() => {\r\n                    dispatch({\r\n                        type: ADD_DATA,\r\n                        payload: { ...imageForDB },\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                openNotification({ message: e.name, description: e.message })\r\n            } else {\r\n                openNotification({\r\n                    message: 'error',\r\n                    description: 'unknown error',\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteImage = (\r\n    img: Image\r\n): ((\r\n    dispatch: Dispatch<{ type: string; payload: Image[] }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: Image[] }>\r\n    ): Promise<void> => {\r\n        const response = db.collection('images')\r\n        try {\r\n            await response\r\n                .doc(img.firestoreId)\r\n                .delete()\r\n                .then(() => {\r\n                    dispatch({ type: DELETE_DATA, payload: [img] })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                openNotification({ message: e.name, description: e.message })\r\n            } else {\r\n                openNotification({\r\n                    message: 'error',\r\n                    description: 'unknown error',\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearImagesList = (): { type: string; payload: [] } => {\r\n    return {\r\n        type: CLEAR_DATA,\r\n        payload: [],\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Avatar, Card } from 'antd'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootState } from '../../../redux/rootReducer'\r\nimport { FeedImage } from '../types'\r\nimport { deleteImage } from '../../../redux/imagesReducer/actions'\r\n\r\nconst ImageItemComponent = (item: FeedImage): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n    const handleButtonDelete = (): void => {\r\n        dispatch(deleteImage(item))\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            key={item.id}\r\n            cover={<img src={item.base64} />}\r\n            actions={[\r\n                user.uid === item.uid ? (\r\n                    <DeleteOutlined\r\n                        key={item.id}\r\n                        onClick={handleButtonDelete}\r\n                    />\r\n                ) : null,\r\n            ]}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar src={item.avatar} />}\r\n                title={item.username}\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport const ImageItem = React.memo(ImageItemComponent)\r\n","import { Select } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ImageItem } from '../ImageItem'\r\nimport { RootState } from '../../../redux/rootReducer'\r\nimport { FeedImage } from '../types'\r\nimport { getImages } from '../../../redux/imagesReducer/actions'\r\nimport './styles.css'\r\n\r\nconst FeedComponent = (): JSX.Element => {\r\n    const images = useSelector((state: RootState) => state.images.images)\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n    const dispatch = useDispatch()\r\n    const [selectedUser, setSelectedUser] = useState('All')\r\n\r\n    useEffect(() => {\r\n        dispatch(getImages())\r\n    }, [dispatch])\r\n\r\n    const handleUserSelect = (e: string): void => {\r\n        setSelectedUser(`${e}`)\r\n    }\r\n\r\n    const users = images.reduce(\r\n        (acc: string[], item: FeedImage) => {\r\n            if (\r\n                acc.find(\r\n                    (name: string) =>\r\n                        name === item.username ||\r\n                        (name === 'My' && item.uid === user.uid)\r\n                )\r\n            ) {\r\n                return acc\r\n            } else {\r\n                return [...acc, user.uid === item.uid ? 'My' : item.username]\r\n            }\r\n        },\r\n        ['All']\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>Sort by user </span>\r\n                <Select\r\n                    className=\"users-select\"\r\n                    value={selectedUser}\r\n                    onChange={handleUserSelect}\r\n                >\r\n                    {users.map((item: string, index: number) => (\r\n                        <Select.Option value={item} key={index}>\r\n                            {item}\r\n                        </Select.Option>\r\n                    ))}\r\n                </Select>\r\n            </div>\r\n            <div className=\"images-wrapper\">\r\n                <h3>{`${selectedUser} images`}</h3>\r\n                {images.map((item: FeedImage) =>\r\n                    item.username === selectedUser ||\r\n                    selectedUser === 'All' ||\r\n                    (selectedUser === 'My' && item.uid === user.uid) ? (\r\n                        <ImageItem {...item} key={item.id} />\r\n                    ) : null\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Feed = React.memo(FeedComponent)\r\n","export const TOOLS = ['Pencil', 'Rectangle', 'Circle', 'Line']\r\n","import React, { useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { IProps } from './types'\r\nimport './styles.css'\r\n\r\nconst CanvasComponent: React.FC<IProps> = ({\r\n    canvasRef,\r\n    secondCanvasRef,\r\n    secondContextRef,\r\n    contextRef,\r\n    selectedTool,\r\n    lineWidth,\r\n    color,\r\n}) => {\r\n    const [isDrawing, setIsDrawing] = useState(false)\r\n    const [startX, setStartX] = useState(0)\r\n    const [startY, setStartY] = useState(0)\r\n\r\n    const canvasRefInner = useRef<HTMLCanvasElement | null>(null)\r\n    const contextRefInner = useRef<CanvasRenderingContext2D | null>(null)\r\n    const secondContextRefInner = useRef<CanvasRenderingContext2D | null>(null)\r\n    const secondCanvasRefInner = useRef<HTMLCanvasElement | null>(null)\r\n\r\n    const viewportRef = useRef<HTMLDivElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRefInner.current\r\n        if (canvas) {\r\n            canvas.width = viewportRef.current?.clientWidth || 0\r\n            canvas.height = viewportRef.current?.clientHeight || 0\r\n            const context = canvas.getContext('2d')\r\n            contextRefInner.current = context\r\n            context ? (context.lineCap = 'round') : null\r\n        }\r\n\r\n        canvasRef ? (canvasRef.current = canvasRefInner.current) : null\r\n        contextRef ? (contextRef.current = contextRefInner.current) : null\r\n\r\n        const secondCanvas = secondCanvasRefInner.current\r\n        if (secondCanvas) {\r\n            secondCanvas.width = viewportRef.current?.clientWidth || 0\r\n            secondCanvas.height = viewportRef.current?.clientHeight || 0\r\n            const secondContext = secondCanvas?.getContext('2d')\r\n            secondContextRefInner.current = secondContext\r\n        }\r\n\r\n        secondCanvasRef\r\n            ? (secondCanvasRef.current = secondCanvasRefInner.current)\r\n            : null\r\n        secondContextRef\r\n            ? (secondContextRef.current = secondContextRefInner.current)\r\n            : null\r\n    }, [canvasRef, contextRef, secondCanvasRef, secondContextRef])\r\n\r\n    const deltaX = (): number => {\r\n        const canvasWidth = canvasRefInner.current\r\n            ? canvasRefInner.current.width\r\n            : 0\r\n        return (window.innerWidth - canvasWidth) / 2\r\n    }\r\n\r\n    const deltaY = (): number => {\r\n        const sliderPadding = 12\r\n        const toolsHeight = document.getElementById('tools')\r\n            ? document.getElementById('tools')?.clientHeight\r\n            : 0\r\n        const pageHeaderHeight = document.getElementById('page-header')\r\n            ? document.getElementById('page-header')?.clientHeight\r\n            : 0\r\n\r\n        return (toolsHeight || 0) + (pageHeaderHeight || 0) + sliderPadding\r\n    }\r\n\r\n    const updateImg = (): void => {\r\n        secondContextRefInner.current?.drawImage(\r\n            canvasRefInner.current ? canvasRefInner.current : canvasRef.current,\r\n            0,\r\n            0\r\n        )\r\n        contextRefInner.current?.clearRect(\r\n            0,\r\n            0,\r\n            canvasRefInner.current ? canvasRefInner.current.width : 0,\r\n            canvasRefInner.current ? canvasRefInner.current.height : 0\r\n        )\r\n    }\r\n\r\n    const startDraw = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement>): void => {\r\n        const { x, y } = nativeEvent\r\n        contextRefInner.current?.beginPath()\r\n        contextRefInner.current?.moveTo(x - deltaX(), y - deltaY())\r\n\r\n        setIsDrawing(true)\r\n        setStartX(x)\r\n        setStartY(y)\r\n    }\r\n\r\n    const finishDraw = (): void => {\r\n        contextRefInner.current?.closePath()\r\n        updateImg()\r\n        setIsDrawing(false)\r\n    }\r\n\r\n    const draw = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement>): void => {\r\n        if (!isDrawing) {\r\n            return\r\n        }\r\n        const { x, y } = nativeEvent\r\n\r\n        contextRefInner.current\r\n            ? (contextRefInner.current.lineWidth = lineWidth)\r\n            : 5\r\n        contextRefInner.current\r\n            ? (contextRefInner.current.strokeStyle = color)\r\n            : 'Black'\r\n\r\n        contextRefInner.current?.clearRect(\r\n            0,\r\n            0,\r\n            canvasRefInner.current ? canvasRefInner.current.width : 0,\r\n            canvasRefInner.current ? canvasRefInner.current.height : 0\r\n        )\r\n        switch (selectedTool) {\r\n            case 'Line':\r\n                contextRefInner.current?.beginPath()\r\n                contextRefInner.current?.moveTo(\r\n                    startX - deltaX(),\r\n                    startY - deltaY()\r\n                )\r\n                contextRefInner.current?.lineTo(x - deltaX(), y - deltaY())\r\n                break\r\n            case 'Circle':\r\n                const getRaduis = (): number => {\r\n                    return Math.sqrt(\r\n                        Math.pow(y - startY, 2) + Math.pow(x - startX, 2)\r\n                    )\r\n                }\r\n\r\n                contextRefInner.current?.beginPath()\r\n                contextRefInner.current?.arc(\r\n                    startX - deltaX(),\r\n                    startY - deltaY(),\r\n                    getRaduis(),\r\n                    0,\r\n                    Math.PI * 2,\r\n                    true\r\n                )\r\n                break\r\n            case 'Pencil':\r\n                contextRefInner.current?.lineTo(x - deltaX(), y - deltaY())\r\n                break\r\n            case 'Rectangle':\r\n                const x0 = Math.min(x, startX) - deltaX(),\r\n                    y0 = Math.min(y, startY) - deltaY(),\r\n                    w = Math.abs(x - startX),\r\n                    h = Math.abs(y - startY)\r\n\r\n                contextRefInner.current?.strokeRect(x0, y0, w, h)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        contextRefInner.current?.stroke()\r\n    }\r\n\r\n    return (\r\n        <div id=\"viewport\" ref={viewportRef}>\r\n            <canvas\r\n                id=\"canvas\"\r\n                onMouseUp={finishDraw}\r\n                onMouseDown={startDraw}\r\n                onMouseMove={draw}\r\n                ref={canvasRefInner}\r\n            />\r\n            <canvas id=\"temp_canvas\" ref={secondCanvasRefInner} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Canvas = React.memo(CanvasComponent)\r\n","import { Button, Select, Slider } from 'antd'\r\nimport { SelectValue } from 'antd/lib/select'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addImage, getImages } from '../../redux/imagesReducer/actions'\r\nimport { RootState } from '../../redux/rootReducer'\r\nimport { TOOLS } from '../../constants/tools'\r\nimport { Canvas } from '../Canvas'\r\nimport { openNotification } from '../../utils/notification'\r\n\r\nconst PaintComponent = (): JSX.Element => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null)\r\n    const contextRef = useRef<CanvasRenderingContext2D | null>(null)\r\n    const secondCanvasRef = useRef<HTMLCanvasElement | null>(null)\r\n    const secondContextRef = useRef<CanvasRenderingContext2D | null>(null)\r\n\r\n    const [selectedTool, setSelectedTool] = useState(TOOLS[0])\r\n    const [lineWidth, setlineWidth] = useState(5)\r\n    const [color, setColor] = useState('#776e6e')\r\n\r\n    const user = useSelector((state: RootState) => state.user.user)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const save = (): void => {\r\n        if (secondCanvasRef.current) {\r\n            dispatch(\r\n                addImage(\r\n                    secondCanvasRef.current.toDataURL(),\r\n                    user.uid,\r\n                    user.displayName,\r\n                    user.photoURL\r\n                )\r\n            )\r\n            dispatch(getImages())\r\n        } else {\r\n            openNotification({\r\n                message: 'Something go wrong',\r\n                description: 'Cannot get canvas',\r\n            })\r\n        }\r\n    }\r\n\r\n    const clear = (): void => {\r\n        secondContextRef.current?.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current ? canvasRef.current.width : 0,\r\n            canvasRef.current ? canvasRef.current.height : 0\r\n        )\r\n        contextRef.current?.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current ? canvasRef.current.width : 0,\r\n            canvasRef.current ? canvasRef.current.height : 0\r\n        )\r\n    }\r\n\r\n    const handleToolSelect = (e: SelectValue): void => {\r\n        setSelectedTool(`${e}`)\r\n    }\r\n\r\n    const handleColorSelect = (e: {\r\n        target: { value: React.SetStateAction<string> }\r\n    }): void => {\r\n        setColor(e.target.value)\r\n    }\r\n\r\n    const handleLineWidthSlider = (value: string | number): void => {\r\n        setlineWidth(+value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"tools\">\r\n                <Button onClick={clear}>clear</Button>\r\n                <Button onClick={save}>save</Button>\r\n                <Select value={selectedTool} onChange={handleToolSelect}>\r\n                    {TOOLS.map((item, index) => (\r\n                        <Select.Option key={`${index}`} value={item}>\r\n                            {item}\r\n                        </Select.Option>\r\n                    ))}\r\n                </Select>\r\n\r\n                <input\r\n                    type=\"color\"\r\n                    id=\"color\"\r\n                    value={color}\r\n                    onChange={handleColorSelect}\r\n                />\r\n                <Slider value={lineWidth} onChange={handleLineWidthSlider} />\r\n            </div>\r\n\r\n            <Canvas\r\n                canvasRef={canvasRef}\r\n                contextRef={contextRef}\r\n                secondCanvasRef={secondCanvasRef}\r\n                secondContextRef={secondContextRef}\r\n                selectedTool={selectedTool}\r\n                lineWidth={lineWidth}\r\n                color={color}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Paint = React.memo(PaintComponent)\r\n","import { Button, Menu } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { clearImagesList } from '../../redux/imagesReducer/actions'\r\nimport { logOut } from '../../redux/userReducer/actions'\r\n\r\nconst HeaderMenuComponent = (): JSX.Element => {\r\n    const { path } = useRouteMatch()\r\n    const dispatch = useDispatch()\r\n    const [currentMenuItem, setCurrentMenuItem] = useState('feed')\r\n\r\n    const handleLogOut = (): void => {\r\n        dispatch(logOut())\r\n        dispatch(clearImagesList())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Menu\r\n                mode=\"horizontal\"\r\n                id=\"page-header\"\r\n                selectedKeys={[currentMenuItem]}\r\n                onClick={(e) => setCurrentMenuItem(e.key)}\r\n            >\r\n                <Menu.Item key=\"paint\">\r\n                    <Link to={`${path}/paint`}>Paint</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"feed\">\r\n                    <Link to={path}>Feed</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"logout-button\">\r\n                    <Button id=\"logout-button\" onClick={handleLogOut}>\r\n                        Logout\r\n                    </Button>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const HeaderMenu = React.memo(HeaderMenuComponent)\r\n","import firebase from 'firebase'\r\nimport { GOOGLE_SIGN_IN, LOGOUT } from '../../constants/reduxTypes'\r\nimport { Dispatch } from 'redux'\r\nimport { openNotification } from '../../utils/notification'\r\nimport { User } from './types'\r\n\r\nexport const googleSignIn = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: firebase.User }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: firebase.User }>\r\n    ): Promise<void> => {\r\n        const provider = new firebase.auth.GoogleAuthProvider()\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                .signInWithPopup(provider)\r\n                .then((result) => {\r\n                    const user = result.user\r\n                    dispatch({\r\n                        type: GOOGLE_SIGN_IN,\r\n                        payload: user || ({} as User),\r\n                    })\r\n                })\r\n                .catch((e) => {\r\n                    throw e\r\n                })\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                openNotification({ message: e.name, description: e.message })\r\n            } else {\r\n                openNotification({\r\n                    message: 'error',\r\n                    description: 'unknown error',\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const logOut = (): ((\r\n    dispatch: Dispatch<{ type: string; payload: Record<string, never> }>\r\n) => Promise<void>) => {\r\n    return async (\r\n        dispatch: Dispatch<{ type: string; payload: Record<string, never> }>\r\n    ): Promise<void> => {\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                .signOut()\r\n                .then(() => {\r\n                    dispatch({ type: LOGOUT, payload: {} })\r\n                })\r\n                .catch((error) => {\r\n                    throw error\r\n                })\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                openNotification({ message: e.name, description: e.message })\r\n            } else {\r\n                openNotification({\r\n                    message: 'error',\r\n                    description: 'unknown error',\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router'\r\nimport { Feed } from '../components/Feed/FeedComponent'\r\nimport { Paint } from '../components/Paint'\r\nimport { HeaderMenu } from '../components/Menu'\r\n\r\nconst AppRouterComponent = (): JSX.Element => {\r\n    const { path } = useRouteMatch()\r\n\r\n    return (\r\n        <>\r\n            <HeaderMenu />\r\n            <Route exact path={path} component={Feed} />\r\n            <Route path={`${path}/paint`} component={Paint} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const AppRouter = React.memo(AppRouterComponent)","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { googleSignIn } from '../../redux/userReducer/actions'\r\nimport './styles.css'\r\n\r\nexport const AuthComponent = (): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleAuthButton = (): void => {\r\n        dispatch(googleSignIn())\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"auth-container\">\r\n                <h1>Sign In with Google</h1>\r\n                <Button onClick={handleAuthButton}>Auth</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Auth = React.memo(AuthComponent)\r\n","export const PATH_ROUTES = {\r\n    APP: '/app',\r\n    AUTH: '/auth',\r\n    MAIN: '/',\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport { AppRouter } from './AppRouter'\r\nimport { Auth } from '../components/Auth'\r\nimport { RootState } from '../redux/rootReducer'\r\nimport { PATH_ROUTES } from '../constants/routePaths'\r\n\r\nconst PaintRouterComponent = (): JSX.Element => {\r\n    const user = useSelector((state: RootState) => state.user.user.uid)\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={PATH_ROUTES.MAIN}>\r\n                    <Redirect to={user ? PATH_ROUTES.APP : PATH_ROUTES.AUTH} />\r\n                </Route>\r\n                <Route\r\n                    path={PATH_ROUTES.APP}\r\n                    render={() =>\r\n                        user ? (\r\n                            <AppRouter />\r\n                        ) : (\r\n                            <Redirect to={PATH_ROUTES.AUTH} />\r\n                        )\r\n                    }\r\n                />\r\n                <Route\r\n                    path={PATH_ROUTES.AUTH}\r\n                    render={() =>\r\n                        user ? <Redirect to={PATH_ROUTES.APP} /> : <Auth />\r\n                    }\r\n                />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport const PaintRouter = React.memo(PaintRouterComponent)","import React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport { PaintRouter } from './router/PaintRouter'\r\nimport { useDeviceType } from './Hooks/useDeviceType'\r\nimport { useEffect } from 'react'\r\nimport { WithHOC } from './HOC'\r\n\r\ninterface IApp {\r\n    isUsingHOC?: boolean\r\n}\r\n\r\nfunction AppComponent({ isUsingHOC }: IApp): JSX.Element {\r\n    const device = useDeviceType()\r\n    useEffect(() => console.log(device, isUsingHOC))\r\n\r\n    return (\r\n        <>\r\n            <PaintRouter />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const App = WithHOC(AppComponent)\r\n","import React from 'react'\r\n\r\ninterface IProps {\r\n    isUsingHOC: boolean\r\n}\r\n\r\nexport function WithHOC<P>(\r\n    WrappedComponent: React.FunctionComponent<P & IProps>\r\n): (props: P) => JSX.Element {\r\n    const ComponentWithHOC = (props: P): JSX.Element => {\r\n        return <WrappedComponent {...props} isUsingHOC={true} />\r\n    }\r\n\r\n    return ComponentWithHOC\r\n}\r\n","export const useDeviceType = (): string => {\r\n    return window.outerWidth > 1024\r\n        ? 'Desktop'\r\n        : window.outerWidth <= 1024 && window.outerWidth >= 768\r\n        ? 'Tablet'\r\n        : 'Mobile'\r\n}\r\n","import {\r\n    ADD_DATA,\r\n    CLEAR_DATA,\r\n    DELETE_DATA,\r\n    GET_DATA,\r\n} from '../../constants/reduxTypes'\r\nimport { Action, Image, Init } from './types'\r\n\r\nconst initialState: Init = {\r\n    images: [] as Image[],\r\n}\r\n\r\ntype State = typeof initialState\r\n\r\nexport const imagesReducer = (state = initialState, action: Action): State => {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return { images: action.payload }\r\n        case ADD_DATA:\r\n            return { ...state }\r\n        case DELETE_DATA:\r\n            return {\r\n                ...state,\r\n                images: [\r\n                    ...state.images.slice(\r\n                        0,\r\n                        state.images.findIndex(\r\n                            (item) => item.id === action.payload[0].id\r\n                        )\r\n                    ),\r\n                    ...state.images.slice(\r\n                        state.images.findIndex(\r\n                            (item) => item.id === action.payload[0].id\r\n                        ) + 1\r\n                    ),\r\n                ],\r\n            }\r\n        case CLEAR_DATA:\r\n            return { images: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { GOOGLE_SIGN_IN, LOGOUT } from '../../constants/reduxTypes'\r\nimport { User, State, Action } from './types'\r\n\r\nconst initialState: { user: User } = {\r\n    user: {} as User,\r\n}\r\n\r\nexport const userReducer = (state = initialState, action: Action): State => {\r\n    switch (action.type) {\r\n        case GOOGLE_SIGN_IN:\r\n            return { ...state, user: action.payload }\r\n        case LOGOUT:\r\n            return { user: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { imagesReducer } from './imagesReducer/reducer'\r\nimport { userReducer } from './userReducer/reducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    images: imagesReducer,\r\n    user: userReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import { rootReducer } from './rootReducer'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { loadState, saveState } from '../services/LocalStorage'\r\nimport { customMiddleware } from './customMiddleware/customMiddleware'\r\n\r\nconst persistedState = loadState()\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    composeEnhancers(applyMiddleware(thunk, customMiddleware))\r\n)\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        user: store.getState().user,\r\n    })\r\n})\r\n","import { RootState } from '../../redux/rootReducer'\r\nimport { User } from '../../redux/userReducer/types'\r\nimport { openNotification } from '../../utils/notification'\r\n\r\nexport const loadState = (): RootState => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state')\r\n        if (serializedState === null) {\r\n            return { user: { user: {} } } as RootState\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return {} as RootState\r\n    }\r\n}\r\n\r\nexport const saveState = (state: { user: { user: User } }): void => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch (e) {\r\n        if (e instanceof Error) {\r\n            openNotification({ message: e.name, description: e.message })\r\n        } else {\r\n            openNotification({ message: 'error', description: 'unknown error' })\r\n        }\r\n    }\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { RootState } from '../rootReducer'\r\n\r\nexport const customMiddleware: Middleware<RootState> =\r\n    () => (next) => (action) => {\r\n        console.log('Middleware triggered:', action.type)\r\n        next(action)\r\n    }\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { App } from './App'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './redux/appStore'\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\n"],"sourceRoot":""}